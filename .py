import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, ChatMemberHandler

print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫...")

NOTIFICATION_GROUP = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    await update.message.reply_text(
        "üì¢ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª\n\n"
        "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n"
        "1. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –ö–ê–ù–ê–õ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "2. –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–≤–æ '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'\n"
        "3. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –ì–†–£–ü–ü–£ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å /set_group –≤ –≥—Ä—É–ø–ø–µ"
    )

async def set_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global NOTIFICATION_GROUP
    if update.message is None or update.effective_chat is None:
        return
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    if chat_type not in ['group', 'supergroup']:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–µ!")
        return
    NOTIFICATION_GROUP = chat_id
    await update.message.reply_text(f"‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞! ID: {chat_id}")
    print(f"‚úÖ –ì—Ä—É–ø–ø–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {chat_id}")

async def handle_member_changes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global NOTIFICATION_GROUP
    try:
        if update.chat_member is None:
            return
        change = update.chat_member
        if (change.old_chat_member is None or 
            change.new_chat_member is None or 
            change.from_user is None or 
            change.chat is None):
            return
        old_status = change.old_chat_member.status
        new_status = change.new_chat_member.status
        user = change.from_user
        chat = change.chat
        print(f"üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ '{chat.title}':")
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {old_status} -> {new_status}")
        if chat.type != 'channel':
            return
        if user.username:
            name = f"@{user.username}"
        else:
            name = user.first_name or f"ID{user.id}"
        if NOTIFICATION_GROUP:
            if old_status in ['left', 'kicked'] and new_status == 'member':
                message = f"‚úÖ {name} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"
                await context.bot.send_message(NOTIFICATION_GROUP, message)
                print(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
            elif old_status == 'member' and new_status in ['left', 'kicked']:
                message = f"‚ùå {name} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞"
                await context.bot.send_message(NOTIFICATION_GROUP, message)
                print(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    token = os.getenv('BOT_TOKEN')
    if not token:
        print("‚ùå –û–®–ò–ë–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ Secrets!")
        return
    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("set_group", set_group))
    app.add_handler(ChatMemberHandler(handle_member_changes, ChatMemberHandler.CHAT_MEMBER))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("‚è≥ –û–∂–∏–¥–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö...")
    app.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )

if __name__ == '__main__':
    main()
