import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, ChatMemberHandler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–º ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_group_id = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_group –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
    )

async def set_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global notification_group_id
    chat_id = update.effective_chat.id
    
    if update.effective_chat.type not in ['group', 'supergroup']:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return
    
    notification_group_id = chat_id
    await update.message.reply_text(f"‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π! ID: {chat_id}")
    logger.info(f"Notification group set: {chat_id}")

def handle_chat_member_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not update.chat_member:
            return
            
        change = update.chat_member
        old_status = change.old_chat_member.status if change.old_chat_member else None
        new_status = change.new_chat_member.status if change.new_chat_member else None
        
        if not old_status or not new_status:
            return
            
        user = change.from_user
        chat = change.chat
        
        # –¢–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
        if chat.type != 'channel':
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name = user.first_name or ""
        if user.last_name:
            name += f" {user.last_name}"
        if user.username:
            name = f"@{user.username}"
        if not name.strip():
            name = f"User_{user.id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if notification_group_id:
            if old_status in ['left', 'kicked'] and new_status == 'member':
                context.bot.send_message(
                    notification_group_id, 
                    f"‚úÖ {name} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"
                )
            elif old_status == 'member' and new_status in ['left', 'kicked']:
                context.bot.send_message(
                    notification_group_id, 
                    f"‚ùå {name} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞"
                )
                    
    except Exception as e:
        logger.error(f"Chat member error: {e}")

def main():
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")
        return
        
    app = Application.builder().token(bot_token).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("set_group", set_group))
    app.add_handler(ChatMemberHandler(handle_chat_member_update))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
