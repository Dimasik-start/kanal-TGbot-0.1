import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, ChatMemberHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≥—Ä—É–ø–ø –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
group_chats = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/set_group - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ!"
    )

async def set_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_group"""
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
    if chat_type not in ['group', 'supergroup']:
        await update.message.reply_text("‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥—Ä—É–ø–ø—ã
    group_chats[chat_id] = chat_id
    await update.message.reply_text(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!\n"
        f"ID –≥—Ä—É–ø–ø—ã: {chat_id}\n"
        f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—é–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö/–æ—Ç–ø–∏—Å–∫–∞—Ö."
    )
    logger.info(f"Group set for notifications: {chat_id}")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    chat_id = update.effective_chat.id
    if chat_id in group_chats:
        await update.message.reply_text(f"‚úÖ –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (ID: {chat_id})")
    else:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_group")

async def track_chat_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∫–∞–Ω–∞–ª–∞"""
    try:
        logger.info(f"Received chat member update: {update}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        chat_member = update.chat_member
        if not chat_member:
            logger.error("No chat_member in update")
            return
            
        old_chat_member = chat_member.old_chat_member
        new_chat_member = chat_member.new_chat_member
        
        user = chat_member.from_user
        chat = chat_member.chat
        
        logger.info(f"Chat: {chat.title} (ID: {chat.id}, Type: {chat.type})")
        logger.info(f"User: {user.first_name} (ID: {user.id})")
        logger.info(f"Old status: {old_chat_member.status}")
        logger.info(f"New status: {new_chat_member.status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞–Ω–∞–ª
        if chat.type != 'channel':
            logger.info(f"Not a channel, skipping. Chat type: {chat.type}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        old_status = old_chat_member.status
        new_status = new_chat_member.status
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = user.username
        if username:
            user_display = f"@{username}"
        else:
            user_display = f"{user.first_name or ''} {user.last_name or ''}".strip()
            if not user_display:
                user_display = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user.id})"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        for group_id in group_chats.values():
            try:
                if old_status in ['left', 'kicked', 'restricted'] and new_status in ['member', 'administrator']:
                    # –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫
                    message = f"‚úÖ {user_display} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"
                    await context.bot.send_message(chat_id=group_id, text=message)
                    logger.info(f"Sent subscription notification: {message}")
                
                elif old_status in ['member', 'administrator'] and new_status in ['left', 'kicked', 'restricted']:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è
                    message = f"‚ùå {user_display} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞"
                    await context.bot.send_message(chat_id=group_id, text=message)
                    logger.info(f"Sent unsubscription notification: {message}")
                else:
                    logger.info(f"No relevant status change: {old_status} -> {new_status}")
                    
            except Exception as e:
                logger.error(f"Error sending message to group {group_id}: {e}")
                
    except Exception as e:
        logger.error(f"Error in track_chat_members: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('BOT_TOKEN')
    
    if not bot_token:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: BOT_TOKEN=your_bot_token_here")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set_group", set_group))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(ChatMemberHandler(track_chat_members, ChatMemberHandler.CHAT_MEMBER))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    logger.info("Bot started")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
